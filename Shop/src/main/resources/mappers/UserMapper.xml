<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pj.spring.mapper.userMapper">
	<!-- 회원가입 -->
	<insert id="userInsert" parameterType="userVO">
		INSERT INTO user(
			user_id 
			, user_password
			, user_name
			, user_phone
			, user_email
			, user_create_id
			, user_update_id
		)VALUES(
			#{user_id}
			, #{user_password}
			, #{user_name}
			, #{user_phone}
			, #{user_email}
			, #{user_id}
			, #{user_id}
		)
	</insert>
	
	<!-- 로그인 -->
	<select id="selectOneById" parameterType="String" resultType="userVO">
		SELECT user_id 
			, user_password
			, user_type
			, user_status
		 FROM user
		WHERE user_id = #{user_id}
		AND user_status = 'E'
	</select>
	
	<!-- 아이디 중복 체크 -->
	<select id="selectCntByUid" parameterType="String" resultType="int">
		SELECT COUNT(*) AS cnt 
			FROM user 
		WHERE user_id = #{user_id}
	</select>
	
	<!-- 주소록 조회 -->
	<select id="addrlistSelect" parameterType="String" resultType="addressbookVO" >
		SELECT address_book_no
			, address_book_addressname
			, address_book_name
			, address_book_postcode
			, address_book_address
			, address_book_detailaddress
			, address_book_phone
		 FROM address_book
		WHERE user_id = #{user_id}
	</select>
	
	<!-- 주소록 등록 -->
	<insert id="addrInsert" parameterType="addressbookVO">
		INSERT INTO address_book(
			address_book_addressname 
			, address_book_name
			, address_book_postcode
			, address_book_address
			, address_book_detailaddress
			, address_book_phone
			, address_book_create_id
			, address_book_update_id
			, user_id
		)VALUES(
			#{address_book_addressname}
			, #{address_book_name}
			, #{address_book_postcode}
			, #{address_book_address}
			, #{address_book_detailaddress}
			, #{address_book_phone}
			, #{user_id}
			, #{user_id}
			, #{user_id}
		);
	</insert>
	
	<!-- 주소록 삭제 -->
	<delete id="addrDelete" parameterType="String">
		DELETE FROM address_book WHERE address_book_no =  #{address_book_no}
	</delete>
	
	<!-- 주소록 수정 -->
	<select id="addrModify" parameterType="String" resultType="addressbookVO" >
		SELECT address_book_no
			, address_book_addressname
			, address_book_name
			, address_book_postcode
			, address_book_address
			, address_book_detailaddress
			, address_book_phone
		 FROM address_book
		WHERE address_book_no =  #{address_book_no}
	</select>
	
	<!-- 주소록 업데이트 -->
	<update id="addrModifyOk" parameterType="addressbookVO">
		UPDATE address_book 
			SET 
		address_book_addressname   = #{address_book_addressname}
		, address_book_name          = #{address_book_name} 
		, address_book_postcode      = #{address_book_postcode} 
		, address_book_address       = #{address_book_address} 
		, address_book_detailaddress = #{address_book_detailaddress} 
		, address_book_phone         = #{address_book_phone} 
		WHERE address_book_no =  #{address_book_no}
	</update>
	
	<!-- 회원정보 조회 -->
 	<select id="memberinfoSelect" parameterType="String" resultType="userVO" >
		SELECT user_id 
			, user_name
			, user_phone
			, user_email
		 FROM user 
		WHERE user_id = #{user_id}
		AND user_status = 'E'
	</select> 
	
	<!-- 회원정보 업데이트 -->
	<update id="memberinfoModify" parameterType="userVO">
		UPDATE user
			SET 
		user_password = #{user_password}
		, user_phone  = #{user_phone} 
		, user_email  = #{user_email} 
		WHERE user_id = #{user_id}
		 AND user_status = 'E'
	</update>
	
    <!-- 문의하기 -->
    <insert id="insertContact" parameterType="contactVO">
        INSERT INTO contact (
            contact_type,
            contact_content,
            contact_password,
            contact_create_id,
            contact_update_id,
            user_id,
            product_no
        ) VALUES (
            #{contact_type},
            #{contact_content},
            #{contact_password},
            #{user_id},
            #{user_id},
            #{user_id},
            #{product_no}
        )
		<selectKey order="AFTER" resultType="String" keyProperty="contact_no">
			SELECT MAX(contact_no) AS contact_no FROM contact
		</selectKey>
    </insert>

    <!-- 문의하기 첨부파일 -->
    <insert id="insertAttachment" parameterType="contactVO">
        INSERT INTO attachment (
            attachment_type,
            attachment_contact_no
        ) VALUES (
            'C',
            #{contact_no}
        )
		<selectKey order="AFTER" resultType="String" keyProperty="attachment_no">
			SELECT MAX(attachment_no) AS attachment_no FROM attachment
		</selectKey>
    </insert>

    <!-- 문의하기 첨부파일 상세 -->
    <insert id="insertAttachmentDetail" parameterType="contactVO">
        INSERT INTO attachment_detail (
            attachment_detail_name,
            attachment_detail_new_name,
            attachment_detail_path,
            attachment_detail_create_id,
            attachment_detail_update_id,
            attachment_no
        ) VALUES (
            #{attachment_detail_name},
            #{attachment_detail_new_name},
            #{attachment_detail_path},
            #{user_id},
            #{user_id},
            #{attachment_no}  <!-- insertAttachment로 반환된 attachment_no 사용 -->
        )
    </insert>
    
	<!-- 문의하기 목록 -->
	<select id="selectContactList" parameterType="String" resultType="contactVO" >
		SELECT
		    c.contact_no,
		    contact_type,
		    contact_content,
		    contact_password,
		    contact_create_at,
		    u.user_id,
		    u.user_name,
		    c.product_no,
		    attachment_detail_name
		FROM contact c
		LEFT JOIN attachment a ON c.contact_no = a.attachment_contact_no
		LEFT JOIN attachment_detail ad ON a.attachment_no = ad.attachment_no
		LEFT JOIN user u ON u.user_id = c.user_id
		LEFT JOIN product p ON c.product_no = p.product_no
		WHERE (c.product_no = p.product_no OR c.product_no IS NULL)
		AND u.user_id = #{user_id}
		ORDER BY contact_no DESC
	</select>

	<!-- 문의하기 상세 -->
	<select id="selectContact" parameterType="String" resultType="contactVO" >
		SELECT
			c.contact_no,
		    contact_type,
		    contact_content,
		    contact_password,
		    contact_create_at,
		    u.user_id,
		    u.user_name,
		    c.product_no,
		    attachment_detail_name,
		    attachment_detail_new_name
		FROM contact c
		LEFT JOIN attachment a ON c.contact_no = a.attachment_contact_no
		LEFT JOIN attachment_detail ad ON a.attachment_no = ad.attachment_no
		LEFT JOIN user u ON u.user_id = c.user_id
		LEFT JOIN product p ON c.product_no = p.product_no
		WHERE (c.product_no = p.product_no OR c.product_no IS NULL)
		AND contact_no = #{contact_no}
	</select>
	
	<!-- 주소록 삭제 -->
	<delete id="deleteContact" parameterType="String">
		DELETE FROM contact WHERE contact_no =  #{contact_no}
	</delete>
</mapper>



